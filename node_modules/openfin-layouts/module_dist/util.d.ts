export interface ServiceClient {
    dispatch: (name: string, payload?: any) => Promise<any>;
    register: (name: string, action: (payload: any) => any) => void;
}
export interface ServiceIdentity {
    uuid: string;
    name: string;
}
export declare function exportClientFunction<T>(clientP: Promise<ServiceClient>, fn: (client: ServiceClient) => () => Promise<T>): () => Promise<T>;
export declare function exportClientFunction<T, A0>(clientP: Promise<ServiceClient>, fn: (client: ServiceClient) => (a: A0) => Promise<T>): (a: A0) => Promise<T>;
export declare function exportClientFunction<T, A0, A1>(clientP: Promise<ServiceClient>, fn: (client: ServiceClient) => (a: A0, a1: A1) => Promise<T>): (a: A0, a1: A1) => Promise<T>;
export declare function exportClientFunction<T, A0, A1, A2>(clientP: Promise<ServiceClient>, fn: (client: ServiceClient) => (a: A0, a1: A1, a2: A2) => Promise<T>): (a: A0, a1: A1, a2: A2) => Promise<T>;
export declare function exportClientFunction<T, A0, A1, A2, A3>(clientP: Promise<ServiceClient>, fn: (client: ServiceClient) => (a: A0, a1: A1, a2: A2, a3: A3) => Promise<T>): (a: A0, a1: A1, a2: A2, a3: A3) => Promise<T>;
export declare function createClientPromise(serviceIdentity: ServiceIdentity, version: string, payload?: {}): Promise<ServiceClient>;
